name: Flutter Linux AppImage Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-linux-appimage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          architecture: x64

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libblkid-dev \
            liblzma-dev \
            cmake \
            ninja-build \
            pkg-config \
            clang \
            gcc \
            git \
            libfuse2 \
            squashfs-tools
          flutter pub get

      - name: Build Linux AppImage
        run: |
          # Build the Flutter app
          flutter build linux --release
          
          # Set variables
          APP_NAME="cicdbuild"  # MUST match your executable name
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          BUNDLE_DIR="build/linux/x64/release/bundle"
          RELEASE_DIR="build/linux/x64/release"
          mkdir -p "$RELEASE_DIR"
          
          # Prepare desktop file
          DESKTOP_FILE="$BUNDLE_DIR/$APP_NAME.desktop"
          if [ ! -f "linux/$APP_NAME.desktop" ]; then
            echo "[Desktop Entry]" > "$DESKTOP_FILE"
            echo "Version=1.0" >> "$DESKTOP_FILE"
            echo "Type=Application" >> "$DESKTOP_FILE"
            echo "Name=${APP_NAME^}" >> "$DESKTOP_FILE"
            echo "Exec=$APP_NAME" >> "$DESKTOP_FILE"
            echo "Icon=$APP_NAME" >> "$DESKTOP_FILE"
            echo "Comment=My Flutter Application" >> "$DESKTOP_FILE"
            echo "Categories=Utility;" >> "$DESKTOP_FILE"  # Single category only
          else
            cp "linux/$APP_NAME.desktop" "$DESKTOP_FILE"
            # Ensure single category
            sed -i 's/Categories=.*/Categories=Utility;/' "$DESKTOP_FILE"
          fi
          
          # Prepare icon
          if [ -f "linux/$APP_NAME.png" ]; then
            cp "linux/$APP_NAME.png" "$BUNDLE_DIR/"
          fi
          
          # Create AppImage
          cd "$BUNDLE_DIR"
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          
          # Create target directory if it doesn't exist
          mkdir -p "$RELEASE_DIR"
          
          # Run appimagetool with explicit output path
          ./appimagetool-x86_64.AppImage --appimage-extract
          ./squashfs-root/AppRun . "$RELEASE_DIR/$APP_NAME.AppImage"
          
          # Verify creation
          ls -la "$RELEASE_DIR"
          test -f "$RELEASE_DIR/$APP_NAME.AppImage" || (echo "AppImage creation failed!" && exit 1)

      - name: Create or Update Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          update: true  # This will update the release if it already exists

      - name: Upload AppImage Release Asset
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          files: build/linux/x64/release/bundle/build/linux/x64/release/cicdbuild.AppImage

